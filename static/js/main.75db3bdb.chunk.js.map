{"version":3,"sources":["hooks/useWindowSize.js","hooks/useIsMobile.js","components/Drawer.js","components/AppBar.js","App.js","serviceWorker.js","index.js"],"names":["getSize","innerHeight","window","innerWidth","outerHeight","outerWidth","useWindowSize","_useState","useState","_useState2","Object","slicedToArray","windowSize","setWindowSize","handleResize","throttle","useEffect","addEventListener","removeEventListener","useIsMobile","DrawerList","_ref","onItemClick","react_default","a","createElement","react_list_dist_default","react_list_dist","onClick","graphic","react_material_icon_dist_default","icon","primaryText","meta","DeviceAppropriateDrawer","_ref2","isMobile","isOpen","setIsDrawerOpen","children","dist_default","modal","open","onOpen","onClose","Drawer","props","Drawer_DeviceAppropriateDrawer","dist","Drawer_DrawerList","href","AppBar","react_top_app_bar_dist_default","title","fixed","navigationIcon","AppLayout","isDrawerOpen","className","components_Drawer","components_AppBar","react_top_app_bar_dist","style","textAlign","fontSize","toConsumableArray","Array","map","x","i","key","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0PAKMA,EAAU,WACd,MAAO,CACLC,YAAaC,OAAOD,YACpBE,WAAYD,OAAOC,WACnBC,YAAaF,OAAOE,YACpBC,WAAYH,OAAOG,aAwBRC,EApBO,WAAM,IAAAC,EACUC,mBAASR,KADnBS,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACnBK,EADmBH,EAAA,GACPI,EADOJ,EAAA,GAGpBK,EAAeC,IACnB,WACEF,EAAcb,MAhBG,KA4BrB,OAPAgB,oBAAU,WAER,OADAd,OAAOe,iBAAiB,SAAUH,GAC3B,WACLZ,OAAOgB,oBAAoB,SAAUJ,KAEtC,IAEIF,GCvBMO,EAJK,WAClB,OAAOb,IAAgBH,WAHN,qDCcbiB,EAAa,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,YAAH,OACjBC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,KACED,EAAAC,EAAAC,cAACE,EAAA,SAAD,CAAUC,QAASN,GACjBC,EAAAC,EAAAC,cAACE,EAAA,gBAAD,CAAiBE,QAASN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAcO,KAAK,aAC7CR,EAAAC,EAAAC,cAACE,EAAA,aAAD,CAAcK,YAAY,gBAC1BT,EAAAC,EAAAC,cAACE,EAAA,aAAD,CAAcM,KAAK,eAErBV,EAAAC,EAAAC,cAACE,EAAA,SAAD,CAAUC,QAASN,GACjBC,EAAAC,EAAAC,cAACE,EAAA,gBAAD,CAAiBE,QAASN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAcO,KAAK,aAC7CR,EAAAC,EAAAC,cAACE,EAAA,aAAD,CAAcK,YAAY,iBAE5BT,EAAAC,EAAAC,cAACE,EAAA,SAAD,CAAUC,QAASN,GACjBC,EAAAC,EAAAC,cAACE,EAAA,gBAAD,CAAiBE,QAASN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAcO,KAAK,aAC7CR,EAAAC,EAAAC,cAACE,EAAA,aAAD,CAAcK,YAAY,mBAQ1BE,EAA0B,SAAAC,GAAqD,IAAlDC,EAAkDD,EAAlDC,SAAUC,EAAwCF,EAAxCE,OAAQC,EAAgCH,EAAhCG,gBAAiBC,EAAeJ,EAAfI,SACpE,OAAOH,EACLb,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,CACEiB,OAAK,EACLC,KAAML,EACNM,OAAQ,kBAAML,GAAgB,IAC9BM,QAAS,kBAAMN,GAAgB,KAE9BC,GAGHhB,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,KACGe,IAoCQM,EA1BA,SAAAC,GAAK,OAClBvB,EAAAC,EAAAC,cAACsB,EAA4BD,EAC3BvB,EAAAC,EAAAC,cAACuB,EAAA,aAAD,KACEzB,EAAAC,EAAAC,cAACuB,EAAA,YAAD,qBAGAzB,EAAAC,EAAAC,cAACuB,EAAA,eAAD,yBAIFzB,EAAAC,EAAAC,cAACuB,EAAA,cAAD,KACEzB,EAAAC,EAAAC,cAACwB,EAAD,CACE3B,YAAa,WACXwB,EAAMV,UAAYU,EAAMR,iBAAgB,MAG5Cf,EAAAC,EAAAC,cAAA,KAAGyB,KAAK,KAAR,gCCnDSC,EAZA,SAAA9B,GAAA,IAPUO,EAOPQ,EAAHf,EAAGe,SAAUE,EAAbjB,EAAaiB,gBAAb,OACbf,EAAAC,EAAAC,cAAC2B,EAAA5B,EAAD,CACE6B,MAAM,QACNC,OAAK,EACLC,eAAgBnB,GAXKR,EAWuB,kBAAMU,GAAgB,IAVpEf,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CACEO,KAAK,OACLH,QAASA,KAQkE,QCoBhE4B,iCAzBG,WAChB,IAAMpB,EAAWjB,IADKZ,EAEkBC,oBAAS,GAF3BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEfkD,EAFehD,EAAA,GAED6B,EAFC7B,EAAA,GAGtB,OACEc,EAAAC,EAAAC,cAAA,OAAKiC,UAAWtB,EAAW,KAAO,4BAChCb,EAAAC,EAAAC,cAACkC,EAAD,CACEvB,SAAUA,EACVC,OAAQoB,EACRnB,gBAAiBA,IAEnBf,EAAAC,EAAAC,cAAA,OAAKiC,UAAWtB,EAAW,KAAO,8BAChCb,EAAAC,EAAAC,cAACmC,EAAD,CACExB,SAAUA,EACVE,gBAAiBA,IAEnBf,EAAAC,EAAAC,cAACoC,EAAA,qBAAD,KACEtC,EAAAC,EAAAC,cAAA,OAAKqC,MAAO,CAAEC,UAAW,SAAUC,SAAU,UAC1CtD,OAAAuD,EAAA,EAAAvD,CAAI,IAAIwD,MAAM,MAAMC,IAAI,SAACC,EAAGC,GAAJ,OAAU9C,EAAAC,EAAAC,cAAA,KAAG6C,IAAKD,GAAIA,WChBvCE,QACW,cAA7BrE,OAAOsE,SAASC,UAEe,UAA7BvE,OAAOsE,SAASC,UAEhBvE,OAAOsE,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrD,EAAAC,EAAAC,cAACoD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.75db3bdb.chunk.js","sourcesContent":["import { useState, useEffect } from 'react'\nimport throttle from 'lodash.throttle'\n\nconst THROTTLE_LIMIT = 300\n\nconst getSize = () => {\n  return {\n    innerHeight: window.innerHeight,\n    innerWidth: window.innerWidth,\n    outerHeight: window.outerHeight,\n    outerWidth: window.outerWidth,\n  }\n}\n\nconst useWindowSize = () => {\n  const [windowSize, setWindowSize] = useState(getSize())\n\n  const handleResize = throttle(\n    () => {\n      setWindowSize(getSize())\n    },\n    THROTTLE_LIMIT,\n  )\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize)\n    return () => {\n      window.removeEventListener('resize', handleResize)\n    }\n  }, [])\n\n  return windowSize\n}\n\nexport default useWindowSize","import useWindowSize from './useWindowSize'\n\nconst BREAKPOINT = 800\n\nconst useIsMobile = () => {\n  return useWindowSize().innerWidth < BREAKPOINT\n}\n\nexport default useIsMobile\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport NavDrawer, {\n  DrawerHeader,\n  DrawerSubtitle,\n  DrawerTitle,\n  DrawerContent,\n} from '@material/react-drawer'\nimport List, {\n  ListItem,\n  ListItemText,\n  ListItemGraphic,\n  ListItemMeta,\n} from '@material/react-list'\nimport MaterialIcon from '@material/react-material-icon'\n\nconst DrawerList = ({ onItemClick }) => (\n  <List>\n    <ListItem onClick={onItemClick}>\n      <ListItemGraphic graphic={<MaterialIcon icon='folder'/>} />\n      <ListItemText primaryText='List Item 1' />\n      <ListItemMeta meta='meta info' />\n    </ListItem>\n    <ListItem onClick={onItemClick}>\n      <ListItemGraphic graphic={<MaterialIcon icon='folder'/>} />\n      <ListItemText primaryText='List Item 1' />\n    </ListItem>\n    <ListItem onClick={onItemClick}>\n      <ListItemGraphic graphic={<MaterialIcon icon='folder'/>} />\n      <ListItemText primaryText='List Item 3' />\n    </ListItem>\n  </List>\n)\nDrawerList.propTypes = {\n  onItemClick: PropTypes.func.isRequired,\n}\n\nconst DeviceAppropriateDrawer = ({ isMobile, isOpen, setIsDrawerOpen, children }) => {\n  return isMobile ? (\n    <NavDrawer\n      modal\n      open={isOpen}\n      onOpen={() => setIsDrawerOpen(true)}\n      onClose={() => setIsDrawerOpen(false)}\n    >\n      {children}\n    </NavDrawer>\n  ) : (\n    <NavDrawer>\n      {children}\n    </NavDrawer>\n  )\n}\nDeviceAppropriateDrawer.propTypes = {\n  isMobile: PropTypes.bool.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  setIsDrawerOpen: PropTypes.func.isRequired,\n}\n\nconst Drawer = props => (\n  <DeviceAppropriateDrawer {...props}>\n    <DrawerHeader>\n      <DrawerTitle>\n        Drawer Title\n      </DrawerTitle>\n      <DrawerSubtitle>\n        Drawer Subtitle\n      </DrawerSubtitle>\n    </DrawerHeader>\n    <DrawerContent>\n      <DrawerList\n        onItemClick={() => {\n          props.isMobile && props.setIsDrawerOpen(false)\n        }}\n      />\n      <a href='/'>test link</a>\n    </DrawerContent>\n  </DeviceAppropriateDrawer>\n)\nDrawer.propTypes = {\n  isMobile: PropTypes.bool.isRequired,\n  isOpen: PropTypes.bool.isRequired,\n  setIsDrawerOpen: PropTypes.func.isRequired,\n}\n\nexport default Drawer","import React from 'react'\nimport PropTypes from 'prop-types'\nimport TopAppBar from '@material/react-top-app-bar'\nimport MaterialIcon from '@material/react-material-icon'\n\nconst renderDrawerIcon = onClick => (\n  <MaterialIcon\n    icon='menu'\n    onClick={onClick}\n  />\n)\n\nconst AppBar = ({ isMobile, setIsDrawerOpen }) => (\n  <TopAppBar\n    title='Title'\n    fixed\n    navigationIcon={isMobile ? renderDrawerIcon(() => setIsDrawerOpen(true)) : null}\n  />\n)\nAppBar.propTypes = {\n  isMobile: PropTypes.bool.isRequired,\n  setIsDrawerOpen: PropTypes.func.isRequired,\n}\n\nexport default AppBar","import React, { useState } from 'react'\nimport { useIsMobile } from './hooks'\nimport Drawer from './components/Drawer'\nimport AppBar from './components/AppBar'\nimport { TopAppBarFixedAdjust } from '@material/react-top-app-bar'\nimport './App.css'\nimport '@material/react-drawer/dist/drawer.css'\nimport '@material/react-list/dist/list.css'\nimport '@material/react-top-app-bar/dist/top-app-bar.css'\nimport '@material/react-material-icon/dist/material-icon.css'\n\nconst AppLayout = () => {\n  const isMobile = useIsMobile()\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false)\n  return (\n    <div className={isMobile ? null : 'desktop-drawer-container'}>\n      <Drawer\n        isMobile={isMobile}\n        isOpen={isDrawerOpen}\n        setIsDrawerOpen={setIsDrawerOpen}\n      />\n      <div className={isMobile ? null : 'desktop-drawer-app-content'}>\n        <AppBar\n          isMobile={isMobile}\n          setIsDrawerOpen={setIsDrawerOpen}\n        />\n        <TopAppBarFixedAdjust>\n          <div style={{ textAlign: 'center', fontSize: '1.5em', }}>\n            {[...new Array(100)].map((x, i) => <p key={i}>{i}</p>)}\n          </div>\n        </TopAppBarFixedAdjust>\n      </div>\n    </div>\n  )\n}\n\nexport default AppLayout\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}